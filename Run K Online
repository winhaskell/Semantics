kframework
---------------------------------------------------------
http://www.kframework.org/tool/run/
---------------------------------------------------------


while.k
---------------------------------------------------------
module WHILE-SYNTAX

  syntax AExp ::= Int
                | Id
                | AExp "/" AExp               [left, seqstrict]
                > AExp "+" AExp               [left, seqstrict]
                | "-" AExp [strict]
                | "(" AExp ")" [bracket]

  syntax BExp ::= Bool
                 | AExp "<" AExp              [seqstrict]
                 | "!" BExp                   [strict]
                 > BExp "&&" BExp             [left, strict(1)]
                 | "(" BExp ")"               [bracket]

  syntax Stmt ::= "skip"
                 | Id "=" AExp                [strict(2)]
                 | "if" BExp "then" Stmt
                             "else" Stmt      [strict(1)]
                 | "while" BExp "do" Stmt
                 > Stmt ";" Stmt              [left]
                 | "(" Stmt ")"               [bracket]

endmodule

module WHILE
  imports WHILE-SYNTAX

  syntax KResult ::= Int | Bool

  configuration <T>
                  <k color="red"> $PGM:Stmt </k>
                  <state color="yellow"> String2Id("x"):Id |-> 3 String2Id("y"):Id |-> 4 </state>
                </T>

// AExp
  rule <k> X:Id => I ... </k> <state>... X |-> I ...</state>
  rule I:Int / J:Int => I /Int J
  rule I:Int + J:Int => I +Int J
  rule - I:Int => 0 -Int I

// BExp
  rule I1 < I2 => I1 <Int I2
  rule ! T => notBool T
  rule true && B => B
  rule false && _ => false

// Stmt
  rule skip => . [structural]
  rule <k> X = I:Int => . ...</k> <state> M:Map => M X|->I </state> when notBool (X in keys(M))
  rule <k> X = I:Int => . ...</k> <state>... X |-> (_ => I) ...</state>
  rule S1:Stmt ; S2:Stmt => S1 ~> S2  [structural]
  rule if true then S:Stmt else _ => S
  rule if false then _ else S => S
  rule while B  do S => if B then ( S ; while B do S ) else skip [structural]

endmodule

---------------------------------------------------------
Running command: kompile while.k
----- End of process output (no output indicates a successful kompile).


---------------------------------------------------------
example.while
---------------------------------------------------------
x = -10 ; z = 0 ; y = 0 ; while x < 10 do ( y = y + 1 ; x = x + 1 )
---------------------------------------------------------

Running command: krun example.while
<T> <k> . </k> <state> x |-> 10 z |-> 0 y |-> 20 </state> </T>
----- End of process output.

---------------------------------------------------------


x = 99 ; z = 0 ; y = 0 ; while x < 100 do ( y = y + 100 ; x = x + 100 ; z = x+y)

Running command: krun example.while
<T> <k> . </k> <state> x |-> 199 z |-> 299 y |-> 100 </state> </T>
----- End of process output.
---------------------------------------------------------
